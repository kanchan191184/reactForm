{"version":3,"sources":["Hooks/user-input.js","components/BasicForm.js","App.js","index.js"],"names":["UserInput","validateValue","useState","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","value","hasError","isValid","valueChangeHandler","event","target","valueBlurHandler","reset","BasicForm","props","trim","enteredFirstName","firstNameInputHaserror","enteredFirstNameIsValid","firstNameChangeHandler","firstNameBlurHandler","resetFirstNameInput","enteredLastName","lastNameInputHaserror","enteredLastNameIsValid","lastNameChangeHandler","lastNameBlurHandler","resetLastNameInput","includes","enteredEmail","emailInputHaserror","enteredEmailIsValid","emailChangeHandler","emailBlurHandler","resetEmailInput","formIsValid","firstNameInputClasses","lastNameInputClasses","emailInputClasses","onSubmit","preventDefault","className","htmlFor","type","id","onChange","onBlur","disabled","App","ReactDOM","render","document","getElementById"],"mappings":"mLAgCeA,EA9BG,SAACC,GACjB,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEMC,EAAeN,EAAcE,GAgBnC,MAAO,CACLK,MAAOL,EACPM,UAjBgBF,GAAgBF,EAkBhCK,QAASH,EACTI,mBAjByB,SAACC,GAC1BR,EAAgBQ,EAAMC,OAAOL,QAiB7BM,iBAduB,SAACF,GACxBN,GAAa,IAcbS,MAXY,WACZX,EAAgB,IAChBE,GAAa,M,OC6FFU,EA9GG,SAACC,GACjB,MAOIjB,GAAU,SAACQ,GAAD,MAA4B,KAAjBA,EAAMU,UANtBC,EADT,EACEX,MACUY,EAFZ,EAEEX,SACSY,EAHX,EAGEX,QACoBY,EAJtB,EAIEX,mBACkBY,EALpB,EAKET,iBACOU,EANT,EAMET,MAGF,EAOIf,GAAU,SAACQ,GAAD,MAA4B,KAAjBA,EAAMU,UANtBO,EADT,EACEjB,MACUkB,EAFZ,EAEEjB,SACSkB,EAHX,EAGEjB,QACoBkB,EAJtB,EAIEjB,mBACkBkB,EALpB,EAKEf,iBACOgB,EANT,EAMEf,MAGF,EAOIf,GAAU,SAACQ,GAAD,OAAWA,EAAMuB,SAAS,QAN/BC,EADT,EACExB,MACUyB,EAFZ,EAEExB,SACSyB,EAHX,EAGExB,QACoByB,EAJtB,EAIExB,mBACkByB,EALpB,EAKEtB,iBACOuB,EANT,EAMEtB,MAGEuB,GAAc,EAGhBjB,GACAM,GACAO,IAEAI,GAAc,GAGhB,IAQMC,EAAwBnB,EAC1B,uBACA,eAEEoB,EAAuBd,EACzB,uBACA,eAEEe,EAAoBR,EACtB,uBACA,eAEJ,OACE,uBAAMS,SArBsB,SAAC9B,GAC7BA,EAAM+B,iBAENnB,IACAM,IACAO,KAgBA,UACE,sBAAKO,UAAU,gBAAf,UACE,sBAAKA,UAAWL,EAAhB,UACE,uBAAOM,QAAQ,OAAf,wBACA,uBACEC,KAAK,OACLC,GAAG,OACHC,SAAU1B,EACV2B,OAAQ1B,EACRf,MAAOW,IAERC,GACC,mBAAGwB,UAAU,aAAb,8CAGJ,sBAAKA,UAAWJ,EAAhB,UACE,uBAAOK,QAAQ,OAAf,uBACA,uBACEC,KAAK,OACLC,GAAG,OACHC,SAAUpB,EACVqB,OAAQpB,EACRrB,MAAOiB,IAERC,GACC,mBAAGkB,UAAU,aAAb,gDAIN,sBAAKA,UAAWH,EAAhB,UACE,uBAAOI,QAAQ,OAAf,4BACA,uBACEC,KAAK,QACLC,GAAG,OACHC,SAAUb,EACVc,OAAQb,EACR5B,MAAOwB,IAERC,GACC,mBAAGW,UAAU,aAAb,6CAGJ,qBAAKA,UAAU,eAAf,SACE,wBAAQE,KAAK,SAASI,UAAWZ,EAAjC,0BC1FOa,MAXf,WACE,OACE,qBAAKP,UAAU,MAAf,SAIE,cAAC,EAAD,OCJNQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.89f518ab.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst UserInput = (validateValue) => {\r\n  const [enteredValue, setEnteredValue] = useState(\"\");\r\n  const [isTouched, setIsTouched] = useState(false);\r\n\r\n  const valueIsValid = validateValue(enteredValue);\r\n  const hasError = !valueIsValid && isTouched;\r\n\r\n  const valueChangeHandler = (event) => {\r\n    setEnteredValue(event.target.value);\r\n  };\r\n\r\n  const valueBlurHandler = (event) => {\r\n    setIsTouched(true);\r\n  };\r\n\r\n  const reset = () => {\r\n    setEnteredValue(\"\");\r\n    setIsTouched(false);\r\n  };\r\n\r\n  return {\r\n    value: enteredValue,\r\n    hasError,\r\n    isValid: valueIsValid,\r\n    valueChangeHandler,\r\n    valueBlurHandler,\r\n    reset,\r\n  };\r\n};\r\n\r\nexport default UserInput;\r\n","import UserInput from \"../Hooks/user-input\";\n\nconst BasicForm = (props) => {\n  const {\n    value: enteredFirstName,\n    hasError: firstNameInputHaserror,\n    isValid: enteredFirstNameIsValid,\n    valueChangeHandler: firstNameChangeHandler,\n    valueBlurHandler: firstNameBlurHandler,\n    reset: resetFirstNameInput,\n  } = UserInput((value) => value.trim() !== \"\");\n\n  const {\n    value: enteredLastName,\n    hasError: lastNameInputHaserror,\n    isValid: enteredLastNameIsValid,\n    valueChangeHandler: lastNameChangeHandler,\n    valueBlurHandler: lastNameBlurHandler,\n    reset: resetLastNameInput,\n  } = UserInput((value) => value.trim() !== \"\");\n\n  const {\n    value: enteredEmail,\n    hasError: emailInputHaserror,\n    isValid: enteredEmailIsValid,\n    valueChangeHandler: emailChangeHandler,\n    valueBlurHandler: emailBlurHandler,\n    reset: resetEmailInput,\n  } = UserInput((value) => value.includes(\"@\"));\n\n  let formIsValid = false;\n\n  if (\n    enteredFirstNameIsValid &&\n    enteredLastNameIsValid &&\n    enteredEmailIsValid\n  ) {\n    formIsValid = true;\n  }\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n\n    resetFirstNameInput();\n    resetLastNameInput();\n    resetEmailInput();\n  };\n\n  const firstNameInputClasses = firstNameInputHaserror\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const lastNameInputClasses = lastNameInputHaserror\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClasses = emailInputHaserror\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className=\"control-group\">\n        <div className={firstNameInputClasses}>\n          <label htmlFor=\"name\">First Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            onChange={firstNameChangeHandler}\n            onBlur={firstNameBlurHandler}\n            value={enteredFirstName}\n          />\n          {firstNameInputHaserror && (\n            <p className=\"error-text\">First name must not be empty.</p>\n          )}\n        </div>\n        <div className={lastNameInputClasses}>\n          <label htmlFor=\"name\">Last Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            onChange={lastNameChangeHandler}\n            onBlur={lastNameBlurHandler}\n            value={enteredLastName}\n          />\n          {lastNameInputHaserror && (\n            <p className=\"error-text\">Last name must not be empty.</p>\n          )}\n        </div>\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor=\"name\">E-Mail Address</label>\n        <input\n          type=\"email\"\n          id=\"name\"\n          onChange={emailChangeHandler}\n          onBlur={emailBlurHandler}\n          value={enteredEmail}\n        />\n        {emailInputHaserror && (\n          <p className=\"error-text\">Please enter valid Email Id.</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button type=\"submit\" disabled={!formIsValid}>\n          Submit\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default BasicForm;\n","import BasicForm from \"./components/BasicForm\";\n// import SimpleInput from './components/SimpleInput';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/* SimpleInput component is form validation without using custom hooks. */}\n      {/* <SimpleInput /> */}\n\n      <BasicForm />\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}